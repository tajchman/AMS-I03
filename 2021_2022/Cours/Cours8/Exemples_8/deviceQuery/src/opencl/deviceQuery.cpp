#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <CL/cl.h>
#include "cl_helper.h"

int main(int argc, char* argv[])
{
	char buffer[1024];

	cl_uint num_platforms;
	checkOclErrors(clGetPlatformIDs(0, NULL, &num_platforms));
	printf("%d PLATFORMS FOUND\n\n", num_platforms);
	cl_platform_id* platforms = (cl_platform_id*)malloc(sizeof(cl_platform_id) * num_platforms);
	checkOclErrors(clGetPlatformIDs(num_platforms, platforms, NULL));
	for (cl_uint k = 0; k < num_platforms; ++k)
	{
		cl_platform_id platform = platforms[k];
		printf("\nCL_PLATFORM: %d\n", k);
		checkOclErrors(clGetPlatformInfo(platform, CL_PLATFORM_NAME, sizeof(buffer), buffer, NULL));
		printf("\tCL_PLATFORM_NAME: %s\n", buffer);
		checkOclErrors(clGetPlatformInfo(platform, CL_PLATFORM_VENDOR, sizeof(buffer), buffer, NULL));
		printf("\tCL_PLATFORM_VENDOR: %s\n", buffer);
		checkOclErrors(clGetPlatformInfo(platform, CL_PLATFORM_VERSION, sizeof(buffer), buffer, NULL));
		printf("\tCL_PLATFORM_VERSION: %s\n", buffer);
		checkOclErrors(clGetPlatformInfo(platform, CL_PLATFORM_PROFILE, sizeof(buffer), buffer, NULL));
		printf("\tCL_PLATFORM_PROFILE: %s\n", buffer);
		checkOclErrors(clGetPlatformInfo(platform, CL_PLATFORM_EXTENSIONS, sizeof(buffer), buffer, NULL));
		printf("\tCL_PLATFORM_EXTENSIONS: %s\n", buffer);
		printf("\n");

		cl_uint num_devices;
		checkOclErrors(clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, 0, NULL, &num_devices));
//		printf("%d DEVICES FOUND\n", num_devices);
		cl_device_id* devices = (cl_device_id*)malloc(sizeof(cl_device_id) * num_devices);
		checkOclErrors(clGetDeviceIDs(platform, CL_DEVICE_TYPE_ALL, num_devices, devices, NULL));
		for (cl_uint j = 0; j < num_devices; ++j)
		{
			cl_device_id device = devices[j];
			printf("\t\tCL_DEVICE: %d\n", j);
			cl_device_type type;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_TYPE, sizeof(type), &type, NULL));
			if (type & CL_DEVICE_TYPE_DEFAULT) printf("\t\tCL_DEVICE_TYPE: %s\n", "CL_DEVICE_TYPE_DEFAULT");
			if (type & CL_DEVICE_TYPE_CPU) printf("\t\tCL_DEVICE_TYPE: %s\n", "CL_DEVICE_TYPE_CPU");
			if (type & CL_DEVICE_TYPE_GPU) printf("\t\tCL_DEVICE_TYPE: %s\n", "CL_DEVICE_TYPE_GPU");
			if (type & CL_DEVICE_TYPE_ACCELERATOR) printf("\t\tCL_DEVICE_TYPE: %s\n", "CL_DEVICE_TYPE_ACCELERATOR");
			if (type & CL_DEVICE_TYPE_CUSTOM) printf("\t\tCL_DEVICE_TYPE: %s\n", "CL_DEVICE_TYPE_CUSTOM");
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NAME, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_NAME: %s\n", buffer);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_VENDOR, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_VENDOR: %s\n", buffer);
			cl_uint vendor_id;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_VENDOR_ID, sizeof(vendor_id), &vendor_id, NULL));
			printf("\t\tCL_DEVICE_VENDOR_ID: %d\n", vendor_id);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_VERSION, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_VERSION: %s\n", buffer);
			checkOclErrors(clGetDeviceInfo(device, CL_DRIVER_VERSION, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DRIVER_VERSION: %s\n", buffer);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_OPENCL_C_VERSION, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_OPENCL_C_VERSION: %s\n", buffer);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PROFILE, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_PROFILE: %s\n", buffer);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, sizeof(buffer), buffer, NULL));
			printf("\t\tCL_DEVICE_EXTENSIONS: %s\n", buffer);
			printf("\t\tCL_DEVICE_BUILT_IN_KERNELS: %s\n", clGetDeviceInfo(device, CL_DEVICE_BUILT_IN_KERNELS, sizeof(buffer), buffer, NULL) == CL_SUCCESS ? buffer : "UNSUPPORTED");
			cl_uint max_compute_units;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_COMPUTE_UNITS, sizeof(max_compute_units), &max_compute_units, NULL));
			printf("\t\tCL_DEVICE_MAX_COMPUTE_UNITS: %u\n", max_compute_units);
			cl_uint max_work_item_dimensions;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS, sizeof(max_work_item_dimensions), &max_work_item_dimensions, NULL));
			printf("\t\tCL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: %u\n", max_work_item_dimensions);
			size_t* max_work_item_sizes = (size_t*)malloc(sizeof(size_t) * max_work_item_dimensions);
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_ITEM_SIZES, sizeof(size_t) * max_work_item_dimensions, max_work_item_sizes, NULL));
			printf("\t\tCL_DEVICE_MAX_WORK_ITEM_SIZES: "); for (size_t i = 0; i < max_work_item_dimensions; ++i) printf("%lu\t", max_work_item_sizes[i]); printf("\n");
			free(max_work_item_sizes);
			size_t max_work_group_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(max_work_group_size), &max_work_group_size, NULL));
			printf("\t\tCL_DEVICE_MAX_WORK_GROUP_SIZE: %lu\n", max_work_group_size);
			cl_uint preferred_vector_width_char;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR, sizeof(preferred_vector_width_char), &preferred_vector_width_char, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: %u\n", preferred_vector_width_char);
			cl_uint preferred_vector_width_short;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT, sizeof(preferred_vector_width_short), &preferred_vector_width_short, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: %u\n", preferred_vector_width_short);
			cl_uint preferred_vector_width_int;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT, sizeof(preferred_vector_width_int), &preferred_vector_width_int, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: %u\n", preferred_vector_width_int);
			cl_uint preferred_vector_width_long;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG, sizeof(preferred_vector_width_long), &preferred_vector_width_long, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: %u\n", preferred_vector_width_long);
			cl_uint preferred_vector_width_float;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT, sizeof(preferred_vector_width_float), &preferred_vector_width_float, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: %u\n", preferred_vector_width_float);
			cl_uint preferred_vector_width_double;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE, sizeof(preferred_vector_width_double), &preferred_vector_width_double, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: %u\n", preferred_vector_width_double);
			cl_uint preferred_vector_width_half;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF, sizeof(preferred_vector_width_half), &preferred_vector_width_half, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: %u\n", preferred_vector_width_half);
			cl_uint native_vector_width_char;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR, sizeof(native_vector_width_char), &native_vector_width_char, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: %u\n", native_vector_width_char);
			cl_uint native_vector_width_short;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT, sizeof(native_vector_width_short), &native_vector_width_short, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: %u\n", native_vector_width_short);
			cl_uint native_vector_width_int;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_INT, sizeof(native_vector_width_int), &native_vector_width_int, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_INT: %u\n", native_vector_width_int);
			cl_uint native_vector_width_long;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG, sizeof(native_vector_width_long), &native_vector_width_long, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: %u\n", native_vector_width_long);
			cl_uint native_vector_width_float;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT, sizeof(native_vector_width_float), &native_vector_width_float, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: %u\n", native_vector_width_float);
			cl_uint native_vector_width_double;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE, sizeof(native_vector_width_double), &native_vector_width_double, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: %u\n", native_vector_width_double);
			cl_uint native_vector_width_half;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF, sizeof(native_vector_width_half), &native_vector_width_half, NULL));
			printf("\t\tCL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: %u\n", native_vector_width_half);
			cl_uint max_clock_frequency;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_CLOCK_FREQUENCY, sizeof(max_clock_frequency), &max_clock_frequency, NULL));
			printf("\t\tCL_DEVICE_MAX_CLOCK_FREQUENCY: %u MHz\n", max_clock_frequency);
			cl_uint address_bits;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_ADDRESS_BITS, sizeof(address_bits), &address_bits, NULL));
			printf("\t\tCL_DEVICE_ADDRESS_BITS: %u\n", address_bits);
			cl_ulong max_mem_alloc_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof(max_mem_alloc_size), &max_mem_alloc_size, NULL));
			printf("\t\tCL_DEVICE_MAX_MEM_ALLOC_SIZE: %lu B = %lu MB\n", max_mem_alloc_size, max_mem_alloc_size / 1048576);
			cl_bool image_support;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_IMAGE_SUPPORT, sizeof(image_support), &image_support, NULL));
			printf("\t\tCL_DEVICE_IMAGE_SUPPORT: %u\n", image_support);
			size_t max_parameter_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_PARAMETER_SIZE, sizeof(max_parameter_size), &max_parameter_size, NULL));
			printf("\t\tCL_DEVICE_MAX_PARAMETER_SIZE: %lu B\n", max_parameter_size);
			cl_device_mem_cache_type global_mem_cache_type;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_GLOBAL_MEM_CACHE_TYPE, sizeof(global_mem_cache_type), &global_mem_cache_type, NULL));
			if (global_mem_cache_type == CL_NONE) printf("\t\tCL_DEVICE_GLOBAL_MEM_CACHE_TYPE: %s\n", "CL_NONE");
			if (global_mem_cache_type == CL_READ_ONLY_CACHE) printf("\t\tCL_DEVICE_GLOBAL_MEM_CACHE_TYPE: %s\n", "CL_READ_ONLY_CACHE");
			if (global_mem_cache_type == CL_READ_WRITE_CACHE) printf("\t\tCL_DEVICE_GLOBAL_MEM_CACHE_TYPE: %s\n", "CL_READ_WRITE_CACHE");
			cl_uint global_mem_cacheline_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE, sizeof(global_mem_cacheline_size), &global_mem_cacheline_size, NULL));
			printf("\t\tCL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: %u B\n", global_mem_cacheline_size);
			cl_ulong global_mem_cache_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_GLOBAL_MEM_CACHE_SIZE, sizeof(global_mem_cache_size), &global_mem_cache_size, NULL));
			printf("\t\tCL_DEVICE_GLOBAL_MEM_CACHE_SIZE: %lu B = %lu KB\n", global_mem_cache_size, global_mem_cache_size / 1024);
			cl_ulong global_mem_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof(global_mem_size), &global_mem_size, NULL));
			printf("\t\tCL_DEVICE_GLOBAL_MEM_SIZE: %lu B = %lu MB\n", global_mem_size, global_mem_size / 1048576);
			cl_ulong max_constant_buffer_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE, sizeof(max_constant_buffer_size), &max_constant_buffer_size, NULL));
			printf("\t\tCL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: %lu B = %lu KB\n", max_constant_buffer_size, max_constant_buffer_size / 1024);
			cl_uint max_constant_args;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_MAX_CONSTANT_ARGS, sizeof(max_constant_args), &max_constant_args, NULL));
			printf("\t\tCL_DEVICE_MAX_CONSTANT_ARGS: %u\n", max_constant_args);
			cl_device_local_mem_type local_mem_type;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_LOCAL_MEM_TYPE, sizeof(local_mem_type), &local_mem_type, NULL));
			if (local_mem_type == CL_NONE) printf("\t\tCL_DEVICE_LOCAL_MEM_TYPE: %s\n", "CL_NONE");
			if (local_mem_type == CL_LOCAL) printf("\t\tCL_DEVICE_LOCAL_MEM_TYPE: %s\n", "CL_LOCAL");
			if (local_mem_type == CL_GLOBAL) printf("\t\tCL_DEVICE_LOCAL_MEM_TYPE: %s\n", "CL_GLOBAL");
			cl_ulong local_mem_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_LOCAL_MEM_SIZE, sizeof(local_mem_size), &local_mem_size, NULL));
			printf("\t\tCL_DEVICE_LOCAL_MEM_SIZE: %lu B = %lu KB\n", local_mem_size, local_mem_size / 1024);
			cl_bool error_correction_support;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_ERROR_CORRECTION_SUPPORT, sizeof(error_correction_support), &error_correction_support, NULL));
			printf("\t\tCL_DEVICE_ERROR_CORRECTION_SUPPORT: %u\n", error_correction_support);
			cl_bool host_unified_memory;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_HOST_UNIFIED_MEMORY, sizeof(host_unified_memory), &host_unified_memory, NULL));
			printf("\t\tCL_DEVICE_HOST_UNIFIED_MEMORY: %u\n", host_unified_memory);
			size_t profiling_timer_resolution;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PROFILING_TIMER_RESOLUTION, sizeof(profiling_timer_resolution), &profiling_timer_resolution, NULL));
			printf("\t\tCL_DEVICE_PROFILING_TIMER_RESOLUTION: %lu ns\n", profiling_timer_resolution);
			cl_bool endian_little;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_ENDIAN_LITTLE, sizeof(endian_little), &endian_little, NULL));
			printf("\t\tCL_DEVICE_ENDIAN_LITTLE: %u\n", endian_little);
			cl_bool available;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_AVAILABLE, sizeof(available), &available, NULL));
			printf("\t\tCL_DEVICE_AVAILABLE: %u\n", available);
			cl_bool compier_available;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_COMPILER_AVAILABLE, sizeof(compier_available), &compier_available, NULL));
			printf("\t\tCL_DEVICE_COMPILER_AVAILABLE: %u\n", compier_available);
			cl_bool linker_available;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_LINKER_AVAILABLE, sizeof(linker_available), &linker_available, NULL));
			printf("\t\tCL_DEVICE_LINKER_AVAILABLE: %u\n", linker_available);
			cl_device_exec_capabilities exec_capabilities;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_EXECUTION_CAPABILITIES, sizeof(exec_capabilities), &exec_capabilities, NULL));
			if (exec_capabilities & CL_EXEC_KERNEL) printf("\t\tCL_DEVICE_EXECUTION_CAPABILITIES: %s\n", "CL_EXEC_KERNEL");
			if (exec_capabilities & CL_EXEC_NATIVE_KERNEL) printf("\t\tCL_DEVICE_EXECUTION_CAPABILITIES: %s\n", "CL_EXEC_NATIVE_KERNEL");
			cl_command_queue_properties queue_properties;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_QUEUE_PROPERTIES, sizeof(queue_properties), &queue_properties, NULL));
			if (queue_properties & CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE) printf("\t\tCL_DEVICE_QUEUE_PROPERTIES: %s\n", "CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE");
			if (queue_properties & CL_QUEUE_PROFILING_ENABLE) printf("\t\tCL_DEVICE_QUEUE_PROPERTIES: %s\n", "CL_QUEUE_PROFILING_ENABLE");
			size_t printf_buffer_size;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PRINTF_BUFFER_SIZE, sizeof(printf_buffer_size), &printf_buffer_size, NULL));
			printf("\t\tCL_DEVICE_PRINTF_BUFFER_SIZE: %lu B = %lu KB\n", printf_buffer_size, printf_buffer_size / 1024);
			cl_bool preferred_interop_user_sync;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PREFERRED_INTEROP_USER_SYNC, sizeof(preferred_interop_user_sync), &preferred_interop_user_sync, NULL));
			printf("\t\tCL_DEVICE_PREFERRED_INTEROP_USER_SYNC: %u\n", preferred_interop_user_sync);
//			cl_device_id parent_device;
//			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_PARENT_DEVICE, sizeof(parent_device), &parent_device, NULL));
//			printf("\t\tCL_DEVICE_PARENT_DEVICE: %u\n", parent_device);
			cl_uint reference_count;
			checkOclErrors(clGetDeviceInfo(device, CL_DEVICE_REFERENCE_COUNT, sizeof(reference_count), &reference_count, NULL));
			printf("\t\tCL_DEVICE_REFERENCE_COUNT: %u\n", reference_count);
			printf("\n");
		}
		free(devices);
	}
	free(platforms);
}
